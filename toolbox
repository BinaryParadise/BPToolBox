#!/usr/bin/ruby -w
require 'fileutils'
require 'json'
require 'yaml'
require 'xcodeproj'

Arg_Name_ConfigPath   = "--config"
Arg_Name_ProjectPath  = "--project"
Arg_Name_SourcePaths  = "--sourcePaths"
Arg_Name_Prefix       = "--prefix"
OC_Extension          = [".h", ".mm", ".m", ".xib", ".storyboard", ".pch", ".swift"]
Image_Extension       = [".png", ".jpg", ".jpeg"]
Ignore_Files          = ["main.m", "main.mm"]

# author: 灵镜
# 用来修改类名前缀
# 2019-09-19
class Confuse
  attr_accessor:directory   # 工作目录
  attr_accessor:projectPath # 项目文件目录
  attr_accessor:sourcePaths # 源码目录列表
  attr_accessor:imagePaths  # 图片目录列表
  attr_accessor:old_prefix  # 之前前缀
  attr_accessor:new_prefix  # 新前缀
  attr_accessor:ignorePaths # 忽略目录列表
  attr_accessor:prefixMap   # 替换的映射表
  attr_accessor:sourceFiles # 源码文件列表
  attr_accessor:ignoreCategory # 忽略类别
  attr_accessor:podfile     # podfile
  def initialize(args)
    puts "version: "+RUBY_VERSION
    processArgs(args)
  end

  def processArgs(args)
    @ignorePaths = []
    @sourceFiles = []
    @prefixMap = Hash.new

    actionType = args[0]
    if actionType.nil?
      Confuse::showUsage()
      return
    end
    configPath = args[1].eql?(Arg_Name_ConfigPath) ? args[2] : '.toolbox.yml'
    if configPath && File.exist?(configPath)
      properties = YAML.load_file(Pathname(configPath).to_path)
      @directory = properties['directory']
      Dir.chdir(@directory)
      @projectPath = properties['project']
      @sourcePaths = properties['sourcePaths']
      @ignorePaths = properties['ignorePaths']||[]
      @imagePaths  = properties["imagePaths"]
      @includeCategory = properties['includeCategory']
      @podfile = properties['podfile']
      @old_prefix = properties['prefix'].split("=").first
      @new_prefix = properties['prefix'].split("=").last
      if actionType.eql?('prefix')
        puts Confuse::debug("配置文件#{configPath}已加载...")
        if @ignorePaths.length > 0
          puts Confuse::info("忽略的目录  #{@ignorePaths}")
        end
        prefixAction()
      elsif actionType.eql?('image')
        imageAction()
      end
    else
      puts Confuse::error("缺少参数#{Arg_Name_ConfigPath}且者找不到默认文件.toolbox.yml #{Dir.pwd}",true)
      Confuse::showUsage()
      return nil
    end

  end

  def prefixAction()
    @sourcePaths.each{|item|
      (
        if File::exist?(item)
          replaceFileClassName(Pathname("#{item}").to_path)
        else
          puts Confue::error("文件夹不存在 #{item}")
        end
      )}
    puts ""
    puts Confuse::debug("共计 #{@sourceFiles.count} 项完成重命名...")
    replaceProject()
    replacePodfile()
  end

  def imageAction()
    images = []
    puts "正在收集信息..."
    sleep 1
    magick = `which magick`
    if magick.include?('not found')
      puts Confue::error('找不到命令 imagemagick 准备开始安装...')
      `brew install imagemagick`
      return
    end
    @imagePaths.each{|item|
    (
      updateImage(item,images)
    )}
    count = 0;

    puts Confuse::info("🍺收集完成，准备处理...")
    images.each{|item|
    (
      count = count + 1
      `magick #{item} #{item}`
      print ("正在处理...#{count}/#{images.length} #{item}").ljust(220) + " \r"
      STDOUT.flush
    )}
    puts ""
    puts Confuse::debug("处理完成，共计 #{count} 个图片更新...")
  end

  def updateImage(sourcePath, images)
    if !File::exist?(sourcePath)
      return
    end

    Dir::entries(sourcePath).each{|item|
    (
      subPath = sourcePath+"/"+item
      if File.directory?(subPath)
        if !(item.eql?('.') || item.eql?('..'))
          updateImage(subPath, images)
        end
      else
        if Image_Extension.include?(File.extname(item))
          images.push(subPath)
        end
      end
    )}
  end

  # 替换类名前缀
  def replaceFileClassName(sourcePath)
    Dir::entries(sourcePath).each{|item|(
      subPath = sourcePath+"/"+item
      if File.directory?(subPath) || File.extname(subPath).eql?(".lproj")
        if !(item.eql?('.') || item.eql?('..'))
          replaceFileClassName(subPath)
        end
      else
          replaceClassPrefix(subPath)
      end
      )}
  end

  def replaceClassPrefix(file)
    if File::exist?(file) && OC_Extension.include?(File.extname(file))
      if (@includeCategory.nil? || !@includeCategory) && !File.basename(file).match(/\+\b(\w+)\b/).nil?
        # puts Confuse::debug("忽略类别 #{file}")
        addMapping(file, file)
        return
      end
      if @ignorePaths.select { |e| file.gsub(/#{Dir.pwd}/, "").start_with?(e) }.length > 0 || File.extname(file).eql?(".pch")
        # 忽略的文件需要替换内容
        # pch不重命名
        addMapping(file, file)
        return
      end
      fileName = File.basename(file)
      if Ignore_Files.include?(fileName)
        addMapping(file, file)
      elsif fileName.start_with?(@old_prefix)
        newName = File.dirname(file) + '/' + @new_prefix + fileName[@old_prefix.length, fileName.length-@old_prefix.length]
        # File.rename(file, newName)
        `git mv -k #{file} #{newName}`
        addMapping(file, newName)
      elsif !fileName.start_with?(@new_prefix)
        newName = File.dirname(file) + '/' + @new_prefix + fileName
        # File.rename(file, newName)
        `git mv -k #{file} #{newName}`
        addMapping(file, newName)
      else
        addMapping(file, file)
      end
    end
  end

  def replaceProject()
    puts "开始更新文件内容引用..."
    fileIndex = 0
    @sourceFiles.each{|filePath|
      (
        nFile = File.read(filePath)
        nBuffer = nFile
        # TODO:匹配文件中所有的类名看是否需要替换（提升效率）
        @prefixMap.each{|key,value|
          (
            # 替换import，不支持<xxxxx.h>
            nBuffer = nBuffer.gsub(/([\/\"])(\b#{key}\b)([^\/\+])/) do |match1|
              match1.gsub($~[2], "#{value}")
            end

            # 替换内容
            nBuffer = nBuffer.gsub(/([^\/\+#"])(\b#{key}\b)([^\/+])/) do |match2|
              match2.gsub($~[2], "#{value}")
            end
          )}

        if File.extname(filePath).eql?(".xib")
          nBuffer = nBuffer + "\n"
        end
        if !nFile.eql?(nBuffer)
          File.open(filePath, "r+") do |aFile|
            aFile.syswrite(nBuffer)
         end
         print Confuse::warn("更新 #{fileIndex}\/#{sourceFiles.count} #{filePath.gsub(/#{Dir.pwd}\//,"")}").ljust(200)+" \r"
         STDOUT.flush
        end
        fileIndex = fileIndex+1

      )}

    puts Confuse::warn("共计 #{@sourceFiles.length} 完成更新...")
    buffer = File.read("#{@projectPath}/project.pbxproj")
    @prefixMap.each{|key,value|
      (
        buffer = buffer.gsub(/([^+])(\b#{key}\b)([.])/) do |match|
          match.gsub($~[2], "#{value}")
        end
      )}

   File.open("#{@projectPath}/project.pbxproj", "w") do |aFile|
      aFile.syswrite(buffer)
      puts "更新 " + Confuse::warn("#{@projectPath}/project.pbxproj")
   end

   puts Confuse::error("PS: 请先提交重命名的文件，再提交内容变更的文件!!!🍺")

  end

  def replacePodfile()
    if @podfile.nil?
      return
    end
    puts "更新\t" + Confuse::warn(@podfile)
    buffer = File.read("#{@podfile}")
    @prefixMap.each{|key,value|(
      if buffer.nil?
        puts "#{key} #{value}"
      end
        buffer = buffer.gsub(/"\b#{key}\b/, value)
      )}
    File.write("#{@podfile}", buffer)
  end

  # 添加映射关系
  def addMapping(oldPath, newPath)
    if !@sourceFiles.include?(newPath)
      @sourceFiles.push(newPath)
    end
    oldName = File.basename(oldPath, File.extname(oldPath))
    newName = File.basename(newPath, File.extname(newPath))
    if !@prefixMap.has_key?(oldName)
      @prefixMap[oldName] = newName
      # internalClass(newPath)
      if !oldPath.eql?(newPath)
        path = oldPath.gsub(/#{Dir.pwd}\//,"")
        print Confuse::debug("重命名 #{path}").ljust(200) + " \r"
        STDOUT.flush
      end
    end

  end

  # 内部类(和文件名不同)
  def internalClass(filePath)

    buffer = File.read('newPath')
    # 逆序环视
    buffer.match(/(?<=@interface)\s+\b\w+\b/).to_a.each
  end

  def self.showUsage()
    puts "用法: command #{Confuse::warn('[选项]')}

命令:
    image         修改图片hash
    prefix        修改类目前缀,暂不支持内部类

选项:
    --config      配置文件目录（推荐, 其它参数将失效）
    "
  end

  # 提醒
  def self.warn(msg)
    return "\033[32m#{msg}\033[0m"
  end

  # 信息
  def self.info(msg)
    return "\033[37m#{msg}\033[0m"
  end

  # 调试
  def self.debug(msg)
    return "\033[35m#{msg}\033[0m"
  end

  # 错误
  def self.error(msg, newline = false)
    return newline ? "\033[31m#{msg}\033[0m\n":"\033[31m#{msg}\033[0m"
  end

end

Confuse::new(ARGV)
